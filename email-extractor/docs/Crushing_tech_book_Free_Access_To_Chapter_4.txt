I'm writing a book. This is the book that would have saved me 4 years of stagnation in my career.Today I will provide you free access to chapter 4 of my book. Completely unedited or filtered.I have something to ask of you. Please, read this chapter to the end. At the bottom of this email, please click the link, and give me your honest review of the chapter.I want to create as much impact for your career as possible, and this will help me so much to do that.Thank you very much.  ---  Chapter 4: Problem solving driven career development----------------------------------------------------This is the story of how I got into tech almost 10 years ago.I was in Russia, studying to become an aeronautical engineer. For the first year of university, I as a foreigner have to take a language course to level up on my Russian.Monday to Friday, 8 AM to midday. I had the rest of the day to do whatever I liked. I was young and energetic, and like many university students, very broke.A very close friend of mine showed me a freelancing site. There were many jobs asking for HTML and CSS skills. I found a course on YouTube titled learn HTML & CSS in one hour.HTML and CSS are technologies for web development. You don’t have to understand any of these technologies or even understand what they mean.They are skills I had to learn on my journey and have nothing to do with the point of this story. Good ? Good. Back to my story.So I could be earning money on the side in less than 24 hours ?I took the course. I finished it. Took several courses. It was fun. But finally, I finished learning HTML and CSS. I was ready to look for jobs.So I started searching. Unfortunately every job I found said I must know jQuery.I knew it couldn’t be that easy. I found another course on jQuery and finished it.Back to searching for jobs. Now the jobs want PHP programming language ? Okay. Back to learning.I finally got my first freelance job.But guess what. This was the beginning of 4 years of a skills focused career path. My entire career in software engineering started because I thought I needed skills so I can earn money. Because of this, I was stuck in the skill driven career development.Let me explain with another story.I post daily on social media so I can grow my audience. I got quite busy at work and decided to hire a social media manager to help me out. I had a very good budget, way above market rate for such roles. I was willing to pay even more if I found the right person.I connected with 10 social media managers with over 5 years of experience according to them. I set meetings with 4 of them, who looked like the best candidates to me.The goal of this meeting was to introduce my brand to them and talk about their past experiences.After speaking with all 4, I hired none.They all had one major flaw in common. Skill driven career focus. They were proud to explain how long they had been posting on Instagram, Twitter and even Tik Tok.They knew how to create video content, viral content, even podcasts. They could create slides on Instagram and beautiful grids.That’s all fancy and fun. And these are definitely skills you need to succeed as a social media manager.Well then what’s the problem ? And why is this a flaw ?They thought I was willing to pay them for their skills. But no. I was willing to pay them to solve a problem I was facing.A business will not hire you for the skills you have. A business will hire you to solve a problem they have.Oh how I wish! Oh how I wish someone had told me to build my career around problem solving and not skill acquisition.There’s a very thin line between the two, and I will break it down for you.I will use the social media example to explain further.This is the kind of candidate I would have hired.A candidate that told me these 4 things:1. A problem they solved in the past2. A measurable negative impact caused by that problem3. The solution they brought4. A measurable positive impact by that solutionThis is the problem solving mindset.Here’s an example of how a candidate would show this skill:Start quote \_\_\_\_\_\_\_\_\_I worked with Piggy Vest 2 years ago. They had one major problem. Gen Z and Millennials did not know about them.They knew this when they realized 60% of the people who saved on their app were 85+ year old. This was making them lose over 70% of the market share to their competition.‘We sat down and did some research. We realised that Millennials and Gen Z spent most of their time on Instagram and Tik Tok. We decided to create a strategy to reach this audience where they spend their time.My team and I created a social media calendar specific to the Gen Z and Millenail audience.We also came up with 1 social media campaign for that month. The goal was simple. Increase awareness of the Piggy Vest brand amongst this audience.Using Buffer, we got automatic metrics showing us the metrics, performance and engagement of every piece of content.Our content was very specific.At the end of the month, we got 300,000+ impressions across all social media, 500 new Gen Z sign ups to Piggy Vest.End quote \_\_\_\_\_\_\_\_\_How does that look ? Who will you hire ? This person said nothing about instagram grids, viral videos, or LinkedIn slides. They said nothing about all the hard core skills you need to get the job done.Instead, they focused only on the business problem, the impact of the problem, the solution, and the impact of the solution.Problem: Piggy Vest had low Gen Z usersImpact of Problem: Competitors had majority market shareSolution: Build brand awareness amongst Gen Z using social media engagementImpact of Solution: 500 new Gen Z sign ups after 1 month of solution.This is six figure material. This is the social media manager that gets paid $100k+ per year brands while working from anywhere in the world.This translates to all careers in tech. Let me give you another practical example of how this applies to software engineers.Say you’re hiring for a Frontend Engineering Role. In the job description, they mentioned their love for automated testing.Here’s how you present your previous experience to them.Start quote \_\_\_\_\_\_\_\_\_In my last job, I worked on a team developing the SAAS dashboard for our customers. Every month, we had 8 new customers that churned because the app was too buggy. Too many bugs.During a strategy call with the head of engineering, we decided to add automated tests. I wrote more tests than anyone else. I enjoyed the process.The tests helped us catch bugs early, and reduce regressions.After a few months, we noticed the average number of bugs reported had reduced from 15 a week to less than 6. Also, zero customers churned because of the app being buggy.End quote\_\_\_\_\_\_\_\_\_Now compare this to a frontend engineer who tells you I know Jest, React and Cypress for testing.It’s a completely different mindset. It’s a mindset that let’s tech companies hire you despite your location. Because you are just so good at what you do and think in a problem and solution mindset.Problem solving mindset as you learnHow do you start your career in tech with this mindset ? The two examples above are for people who already work in tech.How can you integrate this mindset from day one of your tech career, even before you start learning.I’ll show you. And this is the exact same advice I give my mentees who end up relocating with 5 figure jobs and leaving me in Nigeria.Remember the mistake I made when I started learning ? Where I learned HTML, CSS, jQuery, and PHP ? The mistake I made was that I never really understood what my role was going to be in an organization.Remember the mistake I made when I started learning ? Where I learned HTML, CSS, jQuery, and PHP ? The mistake I made was that I never understood what my role was going to be in an organisation.I didn’t know what it meant to be a software engineer. I had no idea what problem any organisation has that would need hiring a software engineer. I was learning random technologies I heard about on the internet.A better approach would be to go like this. Remember the 4 steps: problem, impact of problem, solution, impact of solution.1. Understand the fundamental problems that brought the need for software engineers.2. Understand the measurable impact of the problem to any organization.3. Understand the solution4. Understand the measurable impact of the solution.Do this for any role. Product design, digital marketer, data analyst, devops engineer.  ---  Did you learn and get value from this chapter ?Please take 30 seconds to share your feedback.[Please share your review here](https://forms.gle/pm66gfT996d3z11r5?utm_source=newsletter&utm_medium=email&utm_campaign=crushing-tech-book-free-access-to-chapter-4)Thank you very much.             [Online version](https://frantz.mailcoach.app/webview/campaign/3c618ed9-fbf6-4b61-9cd0-e1c70f893235) • [Unsubscribe](https://frantz.mailcoach.app/unsubscribe/fbba01de-5bd1-468f-a377-3337dae3438e/586041f0-2e73-4760-b83d-c1e5d91095da)     Sent by [Frantz Kati](https://twitter.com/bahdcoder?utm_source=newsletter&utm_medium=email&utm_campaign=crushing-tech-book-free-access-to-chapter-4)